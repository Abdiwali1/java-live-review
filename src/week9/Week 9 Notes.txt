4/28/2024

Week 9
Java Day13 - OOP Inheritance (2 modules: 41, 42)
__________________________________________________________________

Inheritance
Method Overriding
final
__________________________________________________________________

Inheritance
    allows a class to share/pass information between different classes
        + provides code re-usability and maintainability
        + good way to organize/group classes that are related

How to inherit in java?
    the extends keyword allows inheritance

terminology to describe inheritance relationship between classes:
    is - a
    Child is a Parent

    names to describe the different classes:
        parent, super, or base class: passes the information

        child, sub, or derived: gets the information

Object class
    The Object class is the parent of all classes
        - doesn't need to be defined, it is automatically inherited
            where toString method is defined

Constructors in Inheritance
    constructor is not inherited, but the child class constructor must always call the parent class constructor
        -> using super() the parent constructor is called

        -> the default constructor always called super() in the first line

Method Overriding

	change the implementation(code) of a method that is inherited from a super class
		-> another way to phrase it: after inheriting a method we can change how it works

	use of overriding: create method implementation that is more specific for the sub class

	@Override
		annotation that helps make sure you override the method correctly
		using the annotation is optional, but recommended to use

Method Overriding rules

	method needs to be inherits
	method signature should be the same
		method signature: name + parameters
	access modifier should be the same or more visible

	return type should be same
		*** or covariant: sub class of that return type (we can talk about later)
__________________________________________________________________

Inheritance questions

IQ: Can you have more than one direct parent?
    NO, java does not allow multi-inheritance ( multiple parents at the same time )

IQ: What is the difference between this and super

    this: reference to the instance of the current class
        -> used to differentiate local variables and instance variables
        -> used to access the instance members of the current class

    super: reference to the instance of the parent class
        -> used to access the instance members in the parent class

IQ: What is the difference between this() and super()

    this(): call a constructor in the same class
        -> Based on the argument given you could call any constructor

    super(): call the constructor from the parent class
        -> default constructor always uses super() on the first line
            -> In order to make an object of the child class we have to call the parent class constructor

IQ: What is the difference between method overloading and overriding

    overloading: have a method with the same name, different parameters
        -> happens in the same class

    overriding: changing the implementation of a method that came from the super class
        -> happens between the super and sub class

	high level:
		these concepts allows methods to dynamically be used throughout our projects. Method overloading helps to create multiple methods that share a similar name making it easier to group similar related functionality but also gives the benefit of different ways to call those methods based on the different parameters we define. Method overriding allows us to take an functionality that was inherited and change that implementation to better suit the sub classes. In this case we are not create more methods, but instead we are able to just change those those same methods worked in specific sub classes

IQ: How can you override static methods?
	static methods cannot be overridden, it is possible to declare a method with the same name in the sub class, but this is called method hiding, not overriding.

	------------------------------------------------------------------------

access modifiers with inheritance

	private: cannot be inherited

	default: can only be inherited within the same package

	protected: can be inherited to the subclass in any package

	public: can be inherited anywhere in the project

__________________________________________________________________

Types of inheritance

	Single inheritance: one class to another class
		class Planet{}
		class Mars extends Planet{}

	Multi level: one class is the direct parent of one class and acts like the grandparent of another
		class Animal {}
		class Dog extends Animal{}
		class Husky extends Dog {}

	Hierarchical: one class is the direct parent of many sub classes. Those sub classes being like siblings
		class Book {}
		class AudioBook extends Book {}
		class EBook extends Book {}
		class TextBook extends Book{}

__________________________________________________________________

final

	final variable: a fixed variable. value cannot be reassigned or changed

		Ex: final int a = 5;
			a = 10; -> this line will not compile because the variable cannot be changed

		- constants: public static final variables
			information/data that are fixed and accessible everywhere

			Ex: Math.PI
				Integer.MAX_VALUE

			- convention for creating constant variables: constant variables are created in all uppercase and underscore for spaces

	final method: method that cannot be overridden -> cannot change the implementation of the method

		syntax: public final void method(){}

		Q: can you overload final methods
			yes

	final class: the class cannot be the parent of another class.

		syntax: public final class name {}

		Q: can a final class be a sub class
			yes

__________________________________________________________________

we write:

	class Animal {
		
	}

what is actually there:

	class Animal extends Object {
		public Animal(){
			super();
		}
	}

