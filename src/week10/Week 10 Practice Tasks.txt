Practice Tasks

	------------------------------------------------------------------------

Language [interface]

	create an interface Language
	create a constant variable: DEFAULT_ENCODING = "UTF-8";
	create abstract methods: hello() & bye()
	create a static method: description()
		print a message about languages: "Languages have the ability to express thoughts and ideas to others using units of sound like words or sentences. There is often rules or syntax for how the words come together"

	create a default method translate()
		based on the language output how many character the language has:

		2 options:
			make a switch with some different print statements
			or
			use the LanguageCharacters method we created in week 7

	create a class English and implement Language
	create a class Spanish and implement Language
		add as many languages as you want
	test all the methods

	------------------------------------------------------------------------

Clothes [abstraction, polymorphism, ArrayList]

	create an abstract class Clothes
	create an abstract method wear()

	create a class TShirt
	inherits the Clothes class
	implement the wear() method

	create an interface HasHood
	create an abstract method putOnHood()

	create a class Jacket
	inherits the Clothes class
	implements the HasHood interface
	implement the wear() & putOnHood() methods

	Extra: Create a extra classes: hat, coat, sock, hoodie

	create a class Store
	create a main method and create TShirt and Jacket objects
	create an ArrayList of Clothes. Add the different objects
	iterate through the ArrayList and call the wear() method

	------------------------------------------------------------------------

Movies Part 1 [Abstraction, ArrayList, Objects]

    - Create a final class Movie
        create the following instance variables:
            title, rating(out of 5), duration(minutes), year

        create a constructor to initialize all the variables

        encapsulate the class

        create a toString to print the information of the Movie

    - Create an interface PlayMovie
        create an abstract method: playMovie(Movie) | Movie object as parameter

    - Create a final class Cinema
        create the following instance variables:
            location, number of theaters, List of Movies

        create a constructor to initialize all the variables

        implement the PlayMovie & implement the playMovie method to say: "Moving Starting, please grab your popcorn and turn your phones off"

        create a method buyTicket(Movie):
            print how much a movie ticket is. The cost is based on the rating of the movie. If it is a 5 the movie costs 25, if it is 3 or 4 it cost 20 and any other rating is 15

        create a toString that will display the information about the Cinema and which Movies are available to watch

    - Create an interface HasSubscription
        create an abstract method subscribe()

    - Create an abstract class StreamingSite
        implement the PlayMovie & HasSubscription interfaces - don't need to implement the methods

        create the following instance variables:
            url, subscription amount, movies available(int)

        create a constructor to initialize all the variables

        create an abstract method:
            pause()

    - Create a final class Netflix
        inherit the StreamingSite class and implement all the methods

    - Create a final class Amazon
        inherit the StreamingSite class and implement all the methods

    - Create a final class Hulu
        inherit the StreamingSite class and implement all the methods

	------------------------------------------------------------------------

Movie Part 2 [abstraction, polymorphism, final, classes, objects, ArrayList]

    - Create a final class User
        create a main method and create Movie, Cinema, Netflix, Amazon, & Hulu objects
        create a List of all the StreamingSites used. Then subscribe to them all.
            extra: you can also pause the movie
        create a List of PlayMovie and add multiple different Cinema and StreamingSite objects. Then play your favorite movie on all of the options

        create a method to determine which StreamingSite is the best for you.
            parameter: StreamingSite
            return: StreamingSite

            options to check if the site is for you:
                subscription is the cheapest
                or has the most number of movies

        create a List of Cinema in your area. A new movie came out, and you want to support it, so you buy a ticket for that movie from every Cinema in your area.

	------------------------------------------------------------------------
